{"version":3,"sources":["../js/spread.js"],"names":["console","log","stuff","value","get","zodi","zodi1","any","flo2","any2","zodi2","zodi3","flo1","fruit","fruit1","fruit2","getFruit","arr","map","item","f","f1","f2","zodiacSigns","flowers","food"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ;AACA,IAAMC,KAAK,GAAG,CACV,CACI,GADJ,EAEI,GAFJ,EAGI,GAHJ,EAII,GAJJ,EAKI,GALJ,CADU,EAOP,CACC,GADD,EAEC,GAFD,CAPO,EAUP,CACC,CACI,GADJ,EAEI,GAFJ,EAGI,GAHJ,CADD,EAMC,CACI,GADJ,EAEI,GAFJ,CAND,EAUC,CACI,IADJ,EAEI,IAFJ,EAGI,IAHJ,EAII,IAJJ,CAVD,CAVO,EA0BP,CACC,IADD,EAEC,IAFD,EAGC,IAHD,CA1BO,EA8BR,CACE,CACI;AAAEC,EAAAA,KAAK,EAAE;AAAT,CADJ,EAEI;AAAEA,EAAAA,KAAK,EAAE;AAAT,CAFJ,CADF,EAIK,CACC;AAAEA,EAAAA,KAAK,EAAE;AAAT,CADD,EAEC;AAAEC,EAAAA,GAAG,EAAE;AAAA,WAAM,IAAN;AAAA;AAAP,CAFD,CAJL,EAOK,CACC;AAAEA,EAAAA,GAAG,EAAE;AAAA,WAAM,IAAN;AAAA;AAAP,CADD,EAEC;AAAEA,EAAAA,GAAG,EAAE;AAAA,WAAM,IAAN;AAAA;AAAP,CAFD,CAPL,CA9BQ,CAAd;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,IAAKC,IAAL,GAAiCH,KAAjC;AAAA,IAAUI,KAAV,GAAiCJ,KAAjC;AAAA,IAAgBK,GAAhB,GAAiCL,KAAjC;AAAA,IAAoBM,IAApB,GAAiCN,KAAjC;AAAA,IAAyBO,IAAzB,GAAiCP,KAAjC;;AACA,0BAAyBK,GAAzB;AAAA,IAAKG,KAAL;AAAA,IAAWC,KAAX;AAAA,IAAiBC,IAAjB;;AACA,2BAA4BH,IAA5B;AAAA,IAAKI,KAAL;AAAA,IAAWC,MAAX;AAAA,IAAkBC,MAAlB;;AAEA,SAASC,QAAT,CAAkBC,GAAlB,EAAsB;AAClB,SAAOA,GAAG,CAACC,GAAJ,CAAQ,UAAAC,IAAI;AAAA,WAAEA,IAAI,CAAChB,KAAL,IAAcgB,IAAI,CAACf,GAAL,EAAhB;AAAA,GAAZ,CAAP;AACH;;AAAA;AAEDY,QAAQ,CAACH,KAAD,CAAR;AACAG,QAAQ,CAACF,MAAD,CAAR;AACAE,QAAQ,CAACD,MAAD,CAAR;AAEA,IAAMK,CAAC,GAACJ,QAAQ,CAACH,KAAD,CAAhB;AACA,IAAMQ,EAAE,GAACL,QAAQ,CAACF,MAAD,CAAjB;AACA,IAAMQ,EAAE,GAACN,QAAQ,CAACD,MAAD,CAAjB;AAEA,IAAMQ,WAAW,gCAAOlB,IAAP,sBAAgBC,KAAhB,sBAA0BI,KAA1B,sBAAoCC,KAApC,EAAjB;AACA,IAAMa,OAAO,gCAAOZ,IAAP,sBAAgBJ,IAAhB,EAAb;AACA,IAAMiB,IAAI,gCAAOL,CAAP,sBAAYC,EAAZ,sBAAkBC,EAAlB,EAAV;AACAtB,OAAO,CAACC,GAAR,CAAYwB,IAAZ,E,CAEA;AAGA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AAEA","sourcesContent":["console.log(2);\nconst stuff = [\n    [\n        '♈',\n        '♉',\n        '♊',\n        '♋',\n        '♌',\n    ], [\n        '♍',\n        '♎',\n    ], [\n        [\n            '♏',\n            '♐',\n            '♑',\n        ],\n        [\n            '♒',\n            '♓',\n        ],\n        [\n            '🌸',\n            '🌷',\n            '🌹',\n            '🌺',\n        ]\n    ], [\n        '🌻',\n        '🌼',\n        '🌽',\n    ],[\n        [\n            { value: '🍅' },\n            { value: '🍎' },\n        ], [\n            { value: '🍏' },\n            { get: () => '🍑' },\n        ], [\n            { get: () => '🍒' },\n            { get: () => '🍓' },\n        ],\n    ]\n];\n\n\n/**\n * Из представленного массива stuff необходимо заполнить\n * константы zodiacSigns, flowers, food соответственно\n * знаками задиака, цветами и съедобными объектами.\n * Значения должны получиться плоскими массивами\n * без оберток в виде объектов и методов вида:\n * 🍅 🍎 🍏 🍑 🍒 🍓\n * Попробуйте написать как можно меньше кода для достижения\n * результата.\n */\n// const a=stuff\n\n\nlet [zodi,zodi1,any,flo2,any2] = stuff;\nlet [zodi2,zodi3,flo1] = any;\nlet [fruit,fruit1,fruit2] = any2;\n\nfunction getFruit(arr){\n    return arr.map(item=>item.value || item.get()); \n};\n  \ngetFruit(fruit);\ngetFruit(fruit1);\ngetFruit(fruit2);\n  \nconst f=getFruit(fruit);\nconst f1=getFruit(fruit1);\nconst f2=getFruit(fruit2);\n  \nconst zodiacSigns = [...zodi, ...zodi1, ...zodi2, ...zodi3];\nconst flowers = [...flo1, ...flo2];\nconst food = [...f,...f1,...f2];\nconsole.log(food);\n\n// let [...fruit,...fruit1,...fruit2] = any2;\n\n\n// let value=\n// const any3=any2.map(el.value,el.get)\n\n// const f2=fruit.map(item=>item.value);\n// const f3=fruit1.map((item=>item.value||item.get()));\n// const f4=fruit2.map(item=>item.get());\n\n\n\n// const zodiacSigns = [...zodi, ...zodi1, ...zodi2, ...zodi3];\n\n// const flowers = [...flo1, ...flo2];\n\n// const food = [...fruit.map(item=>item.value),...fruit1.map((item=>item.value||el.get())),...fruit2.map(item=>item.get())];\n\n\n\n\n"],"file":"spread.js"}